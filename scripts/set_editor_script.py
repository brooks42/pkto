#!/usr/bin/env python

# xml parsing help from https://www.geeksforgeeks.org/reading-and-writing-xml-files-in-python/?ref=lbp
# to run you need to do
# `pip3 install beautifulsoup4`
# `pip3 install lxml`

import argparse
from bs4 import BeautifulSoup 

class Card(object):
    """
    a card from files generated by magic set editor https://magicseteditor.boards.net/page/downloads
    """
    def __init__(self, styling=False, notes="", timeCreated="", timeModified="", name="", castingCost="", image="", superType="", subType="", ruleText="", flavorText="", watermark="", power="", toughness="", cardCodeText="", image2="", mainframeImage1="", mainframeImage2=""):
       self.styling = styling
       self.notes = notes
       self.timeCreated = timeCreated 
       self.timeModified = timeModified
       self.name = name
       self.castingCost = castingCost
       self.image = image
       self.superType = superType
       self.subType = subType
       self.ruleText = ruleText
       self.flavorText = flavorText
       self.watermark = watermark
       self.power = power
       self.toughness = toughness
       self.cardCodeText = cardCodeText
       self.image2 = image2
       self.mainframeImage1 = mainframeImage1
       self.mainframeImage2 = mainframeImage2

    def exportAsString(self):
        """
        cards have the following format:

        card:
            has styling: false
            notes: 
            time created: 2020-12-06 21:19:30
            time modified: 2020-12-07 15:54:05
            name: Bulbasaur
            casting cost: G
            image: image1
            super type: <word-list-type>Pokémon</word-list-type>
            sub type:
                Grass Poison
            rule text:
                <sym>1G</sym>: <kw-0><nospellcheck>Evolve</nospellcheck></kw-0> to <error-spelling:en_us:/magic.mse-game/magic-words>Ivysaur</error-spelling:en_us:/magic.mse-game/magic-words>
                <sym>T</sym>: Add <sym>G</sym>
                <kw-a><nospellcheck>Reach</nospellcheck></kw-a>
            flavor text: <i-flavor></i-flavor>
            watermark: Pokemon Grass
            power: 2
            toughness: 2
            card code text: 
            image 2: 
            mainframe image: 
            mainframe image 2: 
        """
        string = "card:\n"
        string += f"\thas styling: {self.styling}\n"
        string += "\tnotes:\n"
        string += f"\ttime created: {self.timeCreated}\n"
        string += f"\ttime modified: {self.timeModified}\n"
        string += f"\tname: {self.name}\n"
        string += f"\tcasting cost: {self.castingCost}\n"
        string += f"\timage: {self.image}\n"
        string += f"\tsuper type: {self.superType}\n"
        string += "\tsub type:\n"
        string += f"\t\t{self.subType}\n"
        string += "\trule text:\n"
        string += f"\t\t{self.ruleText}\n"
        string += f"\tflavor text: <i-flavor>{self.flavorText}</i-flavor>\n"
        string += f"\twatermark: {self.watermark}\n"
        string += f"\tpower: {self.power}\n"
        string += f"\ttoughness: {self.toughness}\n"
        string += f"\tcard code text: {self.cardCodeText}\n"
        string += f"\timage 2: {self.image2}\n"
        string += f"\tmainframe image: {self.mainframeImage1}\n"
        string += f"\tmainframe image 2: {self.mainframeImage2}\n"
        return string

def main():
    """
    Usage:
        - python set_editor_script.py [options] -i input_file -o output_file

    Options:
        -p preserve pre-set image data from the input file

    Example:
        python set_editor_script.py -i ../ptcg_cockatrice.xml -o example_set2.set
    """
    parser = argparse.ArgumentParser()
    
    parser.add_argument('-p', '--preserve', action='store_true', help='preserves image information in the input file')
    parser.add_argument('-i', '--input', type=str, required=True, help='input file')
    parser.add_argument('-o', '--output', type=str, required=True, help='output file, cannot be the same as input file')

    args = parser.parse_args()

    # validate args
    if (args.input == args.output):
        print('Error: input file cannot be the same as output file.')
        return

    # open the input file as XML, input is assumed to be a cockatrice card file
    with open(args.input, 'r') as f: 
        data = f.read()
        xmlObjects = BeautifulSoup(data, "xml")
        
        # grab the list of cards out of the input cockatrice xml file
        allCards = xmlObjects.findAll("card")
        print(f'Retrieved {len(allCards)} cards')

        for index in range(len(allCards)):
            print(f'card {index}:')
            
            # grab the info and transform this into the Card instance format above
            card = allCards[index]

            for tag in card:
                if tag.name == 'name':
                    print(tag.string)

            # card 134:
            # <card>
            # <name>Lavender Town</name>
            # <set picURL="https://i.imgur.com/HEb2JN5.jpeg" rarity="uncommon">PTCG</set>
            # <color/>
            # <manacost/>
            # <type>Land</type>
            # <tablerow>0</tablerow>
            # <text>T: Add B or W.
            #                                 3B, T: each player sacrifices a Pokémon. If all players do, each player returns a Pokémon from their graveyard to the battlefield tapped.</text>
            # </card>

        # turn those cards into local Card instances

        # then open the output file
        # write the header
        # write each card in the list
        # write the footer

    print('Done')

if __name__ == "__main__":
    main()
