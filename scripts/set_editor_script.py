#!/usr/bin/env python

# xml parsing help from https://www.geeksforgeeks.org/reading-and-writing-xml-files-in-python/?ref=lbp
# to run you need to do
# `pip3 install beautifulsoup4`
# `pip3 install lxml`

import argparse
import datetime

from bs4 import BeautifulSoup 

class Card(object):
    """
    a card from files generated by magic set editor https://magicseteditor.boards.net/page/downloads
    """
    def __init__(self, styling=False, notes="", time_created="", time_modified="", name="", casting_cost="", image="", supertype="", subtype="", rule_text="", flavor_text="", watermark="", power="", toughness="", card_code_text="", image2="", mainframe_image1="", mainframe_image2=""):
       self.styling = styling
       self.notes = notes
       self.timeCreated = time_created 
       self.timeModified = time_modified
       self.name = name
       self.castingCost = casting_cost
       self.image = image
       self.superType = supertype
       self.subType = subtype
       self.ruleText = rule_text
       self.flavorText = flavor_text
       self.watermark = watermark
       self.power = power
       self.toughness = toughness
       self.card_code_text = card_code_text
       self.image2 = image2
       self.mainframe_image1 = mainframe_image1
       self.mainframe_image2 = mainframe_image2

    def __init__(self, cockatrice_card):
        self.styling = False
        self.notes = ""

        dt_date = datetime.datetime.now()
        current_time_str = dt_date.strftime('%y-%m-%d %H:%M:%S')
        self.time_created = current_time_str 
        self.time_modified = current_time_str

        # have to parse the passed tag for this info
        self.name = ""
        self.casting_cost = ""
        self.supertype = ""
        self.subtype = ""
        self.rule_text = ""
        self.flavor_text = ""
        self.power = ""
        self.toughness = ""

        # non-creature card:
        # <card>
        # <name>Lavender Town</name>
        # <set picURL="https://i.imgur.com/HEb2JN5.jpeg" rarity="uncommon">PTCG</set>
        # <color/>
        # <manacost/>
        # <type>Land</type>
        # <tablerow>0</tablerow>
        # <text>T: Add B or W.
        #                                 3B, T: each player sacrifices a Pokémon. If all players do, each player returns a Pokémon from their graveyard to the battlefield tapped.</text>
        # </card>
        
        # creature card
		# <card>
		# 	<name>Squirtle</name>
		# 	<set picURL="https://images.pokemontcg.io/base6/95_hires.png" rarity="common">PTCG</set>
		# 	<color>U</color>
		# 	<manacost>1U</manacost>
		# 	<type>Pokémon - Water</type>
		# 	<pt>1/2</pt>
		# 	<tablerow>2</tablerow>
		# 	<text>2U: Evolve to Wartotle
		# 		Whenever Squirtle blocks a creature, that creature doesn't untap during its controller's next untap step.</text>
		# </card>
        for tag in cockatrice_card:
            if tag.name == 'name':
                self.name = tag.string
                
            if tag.name == 'manacost':
                self.casting_cost = tag.string

            if tag.name == 'type':
                value = tag.string
                values = value.split('-')
                self.supertype = values[0].strip()

                if len(values) > 1:
                    self.subtype = values[1].strip()

            if tag.name == 'pt':
                value = tag.string
                values = value.split('/')
                self.power = values[0]
                self.toughness = values[1]

            if tag.name == 'text':
                self.rule_text = tag.string

        # this is all blank any from the cockatrice info, in future script work this can be merged with existing info 
        self.watermark = ""
        self.card_code_text = ""
        self.image = ""
        self.image2 = ""
        self.mainframe_image1 = ""
        self.mainframe_image2 = ""

    def __repr__(self): 
        return self.exportAsString()

    def exportAsString(self):
        """
        cards have the following format:

        card:
            has styling: false
            notes: 
            time created: 2020-12-06 21:19:30
            time modified: 2020-12-07 15:54:05
            name: Bulbasaur
            casting cost: G
            image: image1
            super type: <word-list-type>Pokémon</word-list-type>
            sub type:
                Grass Poison
            rule text:
                <sym>1G</sym>: <kw-0><nospellcheck>Evolve</nospellcheck></kw-0> to <error-spelling:en_us:/magic.mse-game/magic-words>Ivysaur</error-spelling:en_us:/magic.mse-game/magic-words>
                <sym>T</sym>: Add <sym>G</sym>
                <kw-a><nospellcheck>Reach</nospellcheck></kw-a>
            flavor text: <i-flavor></i-flavor>
            watermark: Pokemon Grass
            power: 2
            toughness: 2
            card code text: 
            image 2: 
            mainframe image: 
            mainframe image 2: 
        """
        string = "card:\n"
        string += f"\thas styling: {str(self.styling).lower()}\n"
        string += "\tnotes:\n"
        string += f"\ttime created: {self.time_created}\n"
        string += f"\ttime modified: {self.time_modified}\n"
        string += f"\tname: {self.name}\n"
        string += f"\tcasting cost: {self.casting_cost}\n"
        string += f"\timage: {self.image}\n"
        string += f"\tsuper type: <word-list-type>{self.supertype}</word-list-type>\n"
        string += "\tsub type:\n"
        string += f"\t\t{self.subtype}\n"
        string += "\trule text:\n"
        string += f"\t\t{self.rule_text}\n"
        string += f"\tflavor text: <i-flavor>{self.flavor_text}</i-flavor>\n"
        string += f"\twatermark: {self.watermark}\n"
        string += f"\tpower: {self.power}\n"
        string += f"\ttoughness: {self.toughness}\n"
        string += f"\tcard code text: {self.card_code_text}\n"
        string += f"\timage 2: {self.image2}\n"
        string += f"\tmainframe image: {self.mainframe_image1}\n"
        string += f"\tmainframe image 2: {self.mainframe_image2}\n"
        return string

def main():
    """
    Usage:
        - python set_editor_script.py [options] -i input_file -o output_file

    Options:
        -p preserve pre-set image data from the input file

    Example:
        python set_editor_script.py -i ../ptcg_cockatrice.xml -o example_set2.set
    """
    # TODO: we need a version of this functionality that smashes a cockatrice file w/ 
    # a mtg set file to populate images etc but update the mtg set file with the updated
    # cockatrice info
    parser = argparse.ArgumentParser()
    
    parser.add_argument('-p', '--preserve', action='store_true', help='preserves image information in the input file')
    parser.add_argument('-i', '--input', type=str, required=True, help='input file')
    parser.add_argument('-o', '--output', type=str, required=True, help='output file, cannot be the same as input file')

    args = parser.parse_args()

    # validate args
    if (args.input == args.output):
        print('Error: input file cannot be the same as output file.')
        return

    # open the input file as XML, input is assumed to be a cockatrice card file
    with open(args.input, 'r') as f: 
        data = f.read()
        xmlObjects = BeautifulSoup(data, "xml")
        
        # grab the list of cards out of the input cockatrice xml file
        allCards = xmlObjects.findAll("card")
        print(f'Retrieved {len(allCards)} cards')

        ripped_cards = []
        for index in range(len(allCards)):
            print(f'card {index}:')
            
            # grab the info and transform this into the Card instance format above
            cockatrice_card = allCards[index]            
            ripped_card = Card(cockatrice_card)
            print(ripped_card.name)
            ripped_cards.append(ripped_card)

        # then open the output file
        with open(args.output, 'w') as output_file:

            # write the header
            output_file.write("""
mse version: 0.3.8
game: magic
stylesheet: m15
set info:
    symbol: symbol5.mse-symbol
    masterpiece symbol: 
styling:
    magic-m15:
        text box mana symbols: magic-mana-small.mse-symbol-font
        inverted common symbol: no
        overlay: 
                    """)
            
            # write each card in the list
            for card in ripped_cards:
                output_file.write(card.exportAsString())
                
            # write the footer
            output_file.write("""
version control:
    type: none
apprentice code:
            """)

    print('Done')

if __name__ == "__main__":
    main()
